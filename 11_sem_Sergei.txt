
Паттерны проектирования это общее многократно использование проблемы которая часто встречается внутри конкретной ситуации

Паттерны это концепция которая описывает как можно решить оду и туже проблему

Классификация 
Сначала было два
По проблеме 
По классам или объектам


Поражающие Предоставляют создание контролируемым образом инициализации и конфигурации объектов классов и типов данных на основе требуемых критерием

Структурные 
Они позволяют организовать связанные предоставляя функциональные возможности 

Поведенческие 
Направленны на выявление общих моделей взаимодействия между объектам


Синголтон
Цель которого ограничить возможность создание объектов класса одним экземпляром. Он обеспечивает глобальность до 1 экземпляра и один доступ к глобальному объекту.


Особенности 
Класс имеет только один экземпляр 
Получение глобальной точки доступа к экземпляру
Инициируется только при первом запросе
Маскирует плохой дизайн до определенного момента


Декоратор
Структурный паттерн цель данного паттерна предоставление доступа классам и объектам во время выполнения кода. Чаще всего он представляет абстрактный класс принимающий в конструкторе объект функциональность которого мы хотим расширить. Однако в python есть встроенный метод который можно использовать.


Случии использование
Необходимсь назначить дополнительные обязанности объектам во время выполнения не ломая код которые используют данное выполнение 
По каким-то причинам не возможно расширить цепочку объектов


Основные возможности декоратора
Расширение поведения объекта без создания подкласса 
Добавление или удаление во время обя́занности объекта
Объедение нескольких моделей поведения путем применения к объекту нескольких декораторов
Разделение монолитного класса который реализует множество вариантов поведения на более мелкие классы


При применении данного паттерна возникает следующие сложности. Примирение одной объерки из стека. Реализация декоратор за исключением его порядка в котором объерки уложенны в стек.


Итератор 
Это поведенческий паттерн его цель позволить вам обходит элементы коллекции не раскрывая её базовое представление. Для этого в python есть два варианта реализовать в классе спец методы iter or next. Второе использовать генераторы. Примеры использования 
Коллекция имеет сложную структуру, необходимо скрыть от её клиента из соображения её безопасности.
Требуется собрать дубли кода из решения.
Обход элементов различных структур данных.
Изначально не известны детали структуры данных.
Возможность итератора. 
Очистка клиентского кода и коллекций путем вынесения кода в обход в отдельные классы. Реализовать новые типы коллекций с передачей в существующий код без нарушений. Обходить одну и ту же коллекцию с помощью нескольких итераторов параллельно учитываю, что каждый из них хранит .Возможность отложить интеграцию и продолжить её по мене необходимости.
