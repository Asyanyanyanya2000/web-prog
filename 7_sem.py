#конспект (опять макса)
'''
# Рекурсия Метод внутри своего тела вызывает самого себя fact(n-1)
# Стоится по двух условия выхода из рекурсии,
# LIFO обработки очереди какой либо в программных средах, last input first out, стек это хранилище внутри стека. 
# Если мы не указываем, будет переполнение памяти.
# Условием выхода будет парамет который является параментром на поставленую задачу, 
# смотрим на факториал, пока не достигунут до еденицы, если наше число больше 1, ifn>1
# fact(n-1)*n
# else:
# return 1

# def fact (n):
#     if n>1:
#         return fact(n-1)*n
#     else:
#         return 1

# print (fact(5))

# Напишите программу которая будет принимать на вход число а на выходе показывать сумму цифр этого числа.

# def sum_fact(num):
#     if num <= 0:
#         return 0
#     else:
#         return sum_fact(num//10) + num % 10

# print(sum_fact(123456789))

# Напишите программу которая выведет все натуральные числа в промежутке от 1 до N
# 5 = 1 2 3 4 5 

# def r_num(num):
#     if num <= 0:
#         return 0
#     else:
#         r_num(num-1)
#         print(num, end=" ")

# r_num(10)


# Считать ставку из консоли содержащие латинские буквы.
# Вывести на экран все согласные буквы этой строки.
# hello => h i l

# ALPHA = ["ayeoiu"]

# def find_let(string_found):
#     if len(string_found)<= 0:
#         return
#     else:
#         if string_found[-1] not in ALPHA:
#             print(string_found[0], end="")
#         find_let(string_found[1:])

# find_let("Hello")
'''
#Домашняя работа (Использовать рекурсию, не использовать циклы)

#Задача 1: Задайте значения М и N. Напишите программу,
#которая выведет все натуральные числа в промежутке от
#М до N.
#M = 1; N = 5 -> "1, 2, 3, 4, 5"
#M = 4; N = 8 -> "4, 5, 6, 7, 8"
'''
def r_num(M,N):
    if M == N-1:
        return 0
    else:
        r_num(M-1,N)
        print(M, end=", ")

r_num(4,3)
'''

#Задача 2: Напишите программу вычисления функции Аккермана 
#с помощью рекурсии. Даны два неотрицательных числа M и n.
#m = 2, n = 3 -> A(m,n) = 29 (тут на самомм деле просто 9, кто-то опечатался)
'''
def A(m,n):
    if m==0:
        return n+1
    elif m>0 and n==0:
        return A(m-1,1)
    elif m>0 and n>0:
        return A(m-1,A(m,n-1))
    else:
        return "исполнить невозможно"

print(A(2,3))
'''
#Задача 3: Задайте произвольный массив. 
#Выведите его элементы, начиная с конца. 
#[1, 2, 5, 0, 10, 34] => 34 10 0 5 2
'''
arr=[1,2,3,4,5,6,7,8,9]
def ny(a,i):
    if i>=0:
        print(a[i], end=" ")
        ny(a,i-1)

ny(arr,len(arr)-1)
'''